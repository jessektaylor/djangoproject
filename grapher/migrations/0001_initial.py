# Generated by Django 3.2 on 2021-04-25 01:10

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CacheExtractionLiteralPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('mentions', models.IntegerField(blank=True, null=True)),
                ('mentions_title', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'CacheExtractionLiteralPost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CacheExtractionNounPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('mentions', models.IntegerField(blank=True, null=True)),
                ('mentions_title', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'CacheExtractionNounPost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CachePostSentiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('text_blob_title', models.FloatField(blank=True, null=True)),
                ('vader_title', models.FloatField(blank=True, null=True)),
                ('flair_title', models.FloatField(blank=True, null=True)),
                ('sentiment_title', models.FloatField(blank=True, null=True)),
                ('text_blob', models.FloatField(blank=True, null=True)),
                ('vader', models.FloatField(blank=True, null=True)),
                ('flair', models.FloatField(blank=True, null=True)),
                ('sentiment', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'CachePostSentiment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckpointComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subreddit', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'CheckPointComment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckpointPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subreddit', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('datetime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'CheckPointPost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommentSentiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_blob', models.FloatField(blank=True, null=True)),
                ('vader', models.FloatField(blank=True, null=True)),
                ('flair', models.FloatField(blank=True, null=True)),
                ('sentiment', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'CommentSentiment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Cryptoticker',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ticker', models.CharField(max_length=6)),
                ('crypto_name', models.CharField(max_length=30)),
                ('marketcap', models.FloatField()),
            ],
            options={
                'db_table': 'cryptoticker',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractionLiteral',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('mentions', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ExtractionLiteral',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractionLiteralPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mentions', models.IntegerField(blank=True, null=True)),
                ('mentions_title', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ExtractionLiteralPost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractionNoun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mentions', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ExtractionNoun',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExtractionNounPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mentions', models.IntegerField(blank=True, null=True)),
                ('mentions_title', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ExtractionNounPost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nasdaqtickers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticker', models.CharField(max_length=15)),
                ('company_name', models.CharField(max_length=100)),
                ('high', models.FloatField()),
                ('low', models.FloatField()),
                ('close', models.FloatField()),
                ('volume', models.FloatField()),
                ('exchange', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'nasdaqtickers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nysetickers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticker', models.CharField(max_length=15)),
                ('company_name', models.CharField(max_length=100)),
                ('high', models.FloatField()),
                ('low', models.FloatField()),
                ('close', models.FloatField()),
                ('volume', models.FloatField()),
                ('exchange', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'nysetickers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PostSentiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text_blob_title', models.FloatField(blank=True, null=True)),
                ('vader_title', models.FloatField(blank=True, null=True)),
                ('flair_title', models.FloatField(blank=True, null=True)),
                ('sentiment_title', models.FloatField(blank=True, null=True)),
                ('text_blob', models.FloatField(blank=True, null=True)),
                ('vader', models.FloatField(blank=True, null=True)),
                ('flair', models.FloatField(blank=True, null=True)),
                ('sentiment', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'PostSentiment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Redditcomment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commentusername', models.CharField(max_length=255)),
                ('upvotes', models.IntegerField(blank=True, null=True)),
                ('commenttext', models.CharField(blank=True, max_length=3000, null=True)),
                ('datetime', models.DateTimeField()),
            ],
            options={
                'db_table': 'redditcomment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Redditcommentcache',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_tickers_used', models.CharField(max_length=30000)),
                ('comment_polarity', models.FloatField()),
                ('comment_subjectivity', models.FloatField()),
                ('datetime', models.DateTimeField()),
                ('subreddit', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'redditcommentcache',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='redditcommentliteralextraction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_tickers_used', models.CharField(max_length=3000)),
                ('comment_polarity', models.FloatField()),
                ('comment_subjectivity', models.FloatField()),
            ],
            options={
                'db_table': 'redditcommentliteralextraction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Redditpost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('username', models.CharField(max_length=255)),
                ('upvotes', models.IntegerField()),
                ('percentupvotes', models.IntegerField()),
                ('commentquanity', models.IntegerField()),
                ('posttext', models.CharField(blank=True, max_length=3000, null=True)),
                ('datetime', models.DateTimeField()),
            ],
            options={
                'db_table': 'redditpost',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Redditpostcache',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title_tickers_used', models.CharField(max_length=300000)),
                ('text_tickers_used', models.CharField(max_length=300000)),
                ('post_title_polarity', models.FloatField()),
                ('post_title_subjectivity', models.FloatField()),
                ('post_text_polarity', models.FloatField()),
                ('post_text_subjectivity', models.FloatField()),
                ('datetime', models.DateTimeField()),
                ('subreddit', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'redditpostcache',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='redditpostliteralextraction',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title_tickers_used', models.CharField(max_length=300000)),
                ('text_tickers_used', models.CharField(max_length=300000)),
                ('post_title_polarity', models.FloatField()),
                ('post_title_subjectivity', models.FloatField()),
                ('post_text_polarity', models.FloatField()),
                ('post_text_subjectivity', models.FloatField()),
            ],
            options={
                'db_table': 'redditpostliteralextraction',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Redditsubreddit',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('subreddit', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'RedditSubreddit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Tickers',
            fields=[
                ('ticker', models.CharField(max_length=15, primary_key=True, serialize=False)),
                ('exchange', models.CharField(max_length=50)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'Tickers',
                'managed': False,
            },
        ),
    ]
